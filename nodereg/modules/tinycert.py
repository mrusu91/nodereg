import logging
import subprocess
from os import makedirs, path
from typing import Any, Dict, Optional

from tinycert import Session

from .interfaces import AbstractModule

log = logging.getLogger(__name__)


class TinyCert(AbstractModule):

    def _write_file(
        self,
        file_path: str,
        file_content: str,
    ) -> None:
        directory_path = path.dirname(file_path)
        makedirs(directory_path, exist_ok=True)
        log.info('Writing file %s', file_path)
        with open(file_path, 'w') as _file:
            _file.write(file_content)

    def _find_cert_by_san(
        self,
        session: Session,
        ca_id: int,
        san: Dict[str, str],
    ) -> Optional[Dict[str, Any]]:
        log.info(
            'Looking for certificate with SAN %r generated by CA %s',
            san,
            ca_id,
        )
        all_certs = session.cert.list(ca_id)
        for cert in all_certs:
            cert_details = session.cert.details(cert['id'])
            if san in cert_details['Alt']:
                log.info('Found certificate %r', cert)
                return cert
        log.info(
            'No certificate found with SAN %r generated by CA %s',
            san,
            ca_id,
        )
        return None

    def _generate_certificate(
        self,
        session: Session,
        ca_details: Dict[str, Any],
        fqdn: str,
    ) -> Dict[str, Any]:
        hostname = fqdn.split('.')[0]
        ip_address = self.node['metadata']['local-ipv4']
        csr = {
            'CN': fqdn,
            'SANs': [
                {'DNS': fqdn},
                {'DNS': hostname},
                {'IP': ip_address},
            ],
        }
        for field in ['C', 'L', 'O', 'OU', 'ST']:
            value = ca_details.get(field)
            if value:
                csr[field] = value
        log.info('Generating certificate with %r', csr)
        csr_out = session.cert.create(ca_details['id'], csr)
        cert_details = session.cert.details(csr_out['cert_id'])
        log.info('Certificate generated %r', cert_details)
        return cert_details

    def _ensure_ca(self, session: Session) -> Dict[str, Any]:
        ca_details = session.ca.details(self.config['ca_id'])
        log.info('Ensuring CA certificate %r is present', ca_details)
        # TODO: guard on usafe filename
        ca_file = path.join(
            self.config['ca_path'],
            ca_details['CN'].lower() + '.pem',
        )
        if not path.isfile(ca_file):
            ca_pem = session.ca.get(self.config['ca_id'])['pem']
            self._write_file(ca_file, ca_pem)
            update_certs_cmd = ['update-ca-certificates']
            if self.chroot_path:
                update_certs_cmd = ['chroot', self.chroot_path] + update_certs_cmd
            subprocess.run(
                update_certs_cmd,
                stdout=subprocess.PIPE,
                check=True,
            )
        else:
            log.info('CA cert %s already present', ca_file)
        return ca_details

    def _ensure_certificate(
        self,
        session: Session,
        cert_id: int,
    ) -> None:
        cert_details = session.cert.details(cert_id)
        log.info('Ensuring certificate %r is present', cert_details)
        cert_name = cert_details['CN'].lower()

        # certificate crt file
        cert_file = path.join(
            self.config['certificates_path'],
            cert_name + '.pem',
        )
        if not path.isfile(cert_file):
            cert_pem = session.cert.get(cert_id, 'cert')['pem']
            self._write_file(cert_file, cert_pem)
        else:
            log.info('%s already present', cert_file)

        # certificate key file
        key_file = path.join(
            self.config['certificates_path'],
            cert_name + '-key.pem',
        )
        if not path.isfile(key_file):
            key_pem = session.cert.get(cert_id, 'key.dec')['pem']
            self._write_file(key_file, key_pem)
        else:
            log.info('%s already present', key_file)

    def run(  # type: ignore # pylint: disable=arguments-differ
        self,
        fqdn: str,
    ) -> None:
        session = Session(self.config['api_key'])
        session.connect(
            self.config['email'],
            self.config['passphrase'],
        )
        ca_details = self._ensure_ca(session)

        if self.config.get('node_certificate'):
            san = {'DNS': fqdn}
            cert_details = self._find_cert_by_san(
                session,
                ca_details['id'],
                san,
            )
            if not cert_details:
                cert_details = self._generate_certificate(
                    session,
                    ca_details,
                    fqdn,
                )
            self._ensure_certificate(session, cert_details['id'])

        for cert_id in self.config['certificates']:
            self._ensure_certificate(session, cert_id)
        session.disconnect()
